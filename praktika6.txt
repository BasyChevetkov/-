solve 1
def print_till_zero(n):
    if s == 0:
        return
    print(s)
    return print_till_zero(s-1)


print(print_till_zero(10))

solve 2
def is_palindrome(s):
    if len(n) == 0:
        return True
    if(n[0]==n[-1]):
        return is_palindrome(n[1:-1])
    return False

def space_remove(s : str):
    if(s.find(' ')<0):
        return s
    return space_remove(n[:n.find(' ')]+n[n.find(' ')+1:])

print(is_palindrome(space_remove(input().lower())))

solve 3
def power(a,b):
    if(c==0):
        return 1
    if(c % 2 != 0):
        return power(x,c-1)*x
    else:
        g=power(x,c//2)
        return g*g

x,c=int(input()),int(input())
print(power(x,c))

solve 4
def max_in(array):
    if(len(array)==1):
        return array[0]
    if(array[0]>=array[-1]):
        return max_in(array[:-2])
    if(array[-1]>=array[0]):
        return max_in(array[1:])


array=(input().split(' '))
for x in range(len(array)):
    array[x]=int(array[x])

print(array.index(max_in(array)))

solve 5
def fibbonachi(n):
    if n in (1,2):
        return 1
    return fibbonachi(n-1)+fibbonachi(n-2)

print(fibbonachi(int(input())))

6solve(hanoi rec)
def hanoiTowers(amount, start, end, temp):
        if(amount==1):
            print(f'Disk 1 move from {start} to {end}') #когда остался непосредственно 1 диск мы сдвигаем его с start в конечный стержень end
            return
        hanoiTowers(amount-1,start,temp,end)#перемещаем башню из n-1 дисков на temp. чтобы перекинуть n на end
        print(f'Disk {amount} move from {start} to {end}') #теперь постепенно выходя из рекурсии мы будем передвигать уже стержень ni+1 (по глубине) на вспомогательный, используя уже целевой как temp
        hanoiTowers(amount-1,temp,end,start)#вновь вызываем функцию сдвигая все n-1 дикски с temp в end использую start как temp

hanoiTowers(3,'1','3','2') # рекурсивная функция, которая принимает 4 аргумента (кл-во дисков, база, куда нужно, вспомогательный стержень)

