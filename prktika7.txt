solve 1
import argparse

def create_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filename', type=str)
    return parser

def create_file(filename):
    try:
        with open(filename, 'r') as f:
            nums = f.read().splitlines()
    except IOError:
        print('File with current name did not find. Try another name')
        quit()
    return nums

def output_lines(file,count):
    for i in range(count):
        print(file[i])

parser = create_parse()
namespace = parser.parse_args()
workspace = create_file(namespace.filename)
output_lines(workspace,10)

solve 2
import argparse

def create_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filename', type=str, nargs='+')
    return parser

def files_concatenation(filenames):
    data=[]
    for filename in filenames:
        try:
            with open(filename, 'r') as f:
                nums = f.read()
        except IOError:
            print(f'File with name {filename} did not find. Try another name-list')
            return
        data.append(nums)
    return data

def parse_files(data):
    for i in data:  print(i)

parser = create_parse()
namespace = parser.parse_args()
workspace = files_concatenation(namespace.filename)
parse_files(workspace)

solve 3
import argparse

def create_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filename', type=str)
    parser.add_argument('-n','--newfile', type=str)
    return parser

def create_file(filename):
    try:
        with open(filename, 'r') as f:
            nums = f.read().splitlines()
    except IOError:
            print(f'File with name {filename} did not find. Try another name-list')
            quit()
    return nums

def parse_files(data):
    new_data=[]
    for i in range(len(data)):
        new_data.append(f'{i+1}: {data[i]}')
    return new_data

def create_new_file(data,filename):
    file= open(f'{filename}.txt','w+')
    s=""
    for i in data:  s+=f'{i}'+'\n'
    file.write(s)
    file.close()

parser = create_parse()
namespace = parser.parse_args()
workspace = create_file(namespace.filename)
new_workspace=parse_files(workspace)
create_new_file(new_workspace,namespace.newfile)

solve 4
import argparse

def create_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filename', type=str)
    return parser

def create_file(filename):
    try:
        with open(filename, 'r') as f:
            nums = f.read()
    except IOError:
        print('File with current name did not find. Try another name')
        quit()
    data=nums.split(' ')
    sorted(data)
    data.reverse()
    return data

def find_large_words(data):
    ans=[]
    for i in range(1,len(data)):
        if(len(data[i])==len(data[i-1])):
            ans.append(data[i-1])
        else:
            ans.append(data[i-1])
            break
    for i in ans: print(i)


parser = create_parse()
namespace = parser.parse_args()
workspace = create_file(namespace.filename)
find_large_words(workspace)

solve 5
import argparse
import random

def create_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filename', type=str)
    return parser

def create_file(filename):
    try:
        with open(filename, 'r') as f:
            nums = f.read()
    except IOError:
        print('File with current name did not find. Try another name')
        quit()
    nums=nums.replace(',','')
    data=nums.split(' ')
    return data

def generate_password(data):
    index2=random.randint(0,len(data)-1)
    index1=random.randint(0,len(data)-1)
    word1, word2 = data[index1].title(),data[index2].title()
    password=word1+word2
    return password



parser = create_parse()
namespace = parser.parse_args()
workspace = create_file(namespace.filename)
print(generate_password(workspace))

solve 6
import argparse
import random

def create_parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--filename', type=str)
    return parser

def create_file(filename):
    try:
        with open(filename, 'r') as f:
            nums = f.read().splitlines()
    except IOError:
        print('File with current name did not find. Try another name')
        quit()
    return nums

def find_comment(data):
    comma=func=0
    ans=[]
    for line in range(0,len(data)):
        if('#' in data[line]):
            comma+=1
            continue
        if('def' in data[line] and comma!=1):
            for sym in range(3, len(data[line])):
                if(data[line][sym]=='('):
                    ans.append(data[line][4:sym])
                    break
        comma=0

    return ans
parser = create_parse()
namespace = parser.parse_args()
workspace = create_file(namespace.filename)
for defs in find_comment(workspace):    print(defs)